using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.SceneManagement;

public class TutorialManager : MonoBehaviour
{
    [SerializeField] private GameObject TutorialCanvas;
    [SerializeField] private TMP_Text TutorialText;
    [SerializeField] private TMP_Text BossUItext;
    [SerializeField] private TMP_Text PlayerHPUIText;
    [SerializeField] private TMP_Text PlayerSkillText;
    [SerializeField] private TMP_Text TaskText;
    [SerializeField] private TMP_Text inputText;
    [SerializeField] private TMP_Text ButtonText;
    [SerializeField] private GameObject TaskBox;
    [SerializeField] private GameObject Player;
    [SerializeField] private GameObject BossManager;
    [SerializeField] private GameObject ProjectileManager;
    [SerializeField] private GameObject MainGameSceneManager;
    private MainGameSceneManage MainGameSceneManage;
    private PlayerMovementTutorial PlayerMovementTutorial;
    private BossManagerTutorial BossManagerTutorial;
    private TutorialProjetileManager TutorialProjetileManager;
    private TutorialCheckManager TutorialCheckManager;
    private LockOnLaserTutorial lockOnLaserTutorial;
    private GameObject GameManager;
    private TimeManager TimeManager;
    private float BossHealth;
    void Start()
    {
        TutorialCheckManager = FindObjectOfType<TutorialCheckManager>();
        MainGameSceneManage = MainGameSceneManager.GetComponent<MainGameSceneManage>();
        TutorialProjetileManager = ProjectileManager.GetComponent<TutorialProjetileManager>();
        BossManagerTutorial = BossManager.GetComponent<BossManagerTutorial>();
        PlayerMovementTutorial = Player.GetComponent<PlayerMovementTutorial>();
        GameManager = GameObject.FindGameObjectWithTag("GameManager");
        TimeManager = GameManager.GetComponent<TimeManager>();
        TimeManager.isTutorial = true;
        BossUItext.text = string.Empty;
        PlayerHPUIText.text = string.Empty;
        PlayerSkillText.text = string.Empty;
        TaskText.text = string.Empty;
        inputText.text = string.Empty;
        ButtonText.text = string.Empty;
        TaskBox.SetActive(false);
        StartCoroutine(Tutorial());
    }

    IEnumerator Tutorial()
    {
        yield return new WaitForSeconds(1f);
        TutorialCanvas.SetActive(true);
        TutorialText.text = "インフェクションへようこそ";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ここは基本操作を学ぶためのチュートリアルです";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "最初は移動です";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "キーボード：矢印キー\nコントローラー：左ジョイスティック";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "試しに動かしてみよう";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialCanvas.SetActive(false);
        PlayerMovementTutorial.canMove = true;
        TaskText.text = "タスク：\n試しに動かしてみよう";
        inputText.text = "キーボード：矢印キー\nコントローラー：左ジョイスティック";
        yield return new WaitUntil(() => PlayerMovementTutorial.Moved == true);
        TaskBox.SetActive(true);
        yield return new WaitForSeconds(3f);
        TaskBox.SetActive(false);
        TaskText.text = string.Empty;
        inputText.text = string.Empty;
        Player.transform.position = PlayerMovementTutorial.PlayerOriginposition;
        PlayerMovementTutorial.canMove = false;
        TutorialCanvas.SetActive(true);
        TutorialText.text = "素晴らしい〜";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "次はボスの紹介です";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialCanvas.SetActive(false);
        BossManagerTutorial.SpawnBoss();
        yield return new WaitForSeconds(2f);
        TutorialCanvas.SetActive(true);
        TutorialText.text = "このゲームは一つのボスだけがある";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ボスはランダムに動き回る";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ただし、今回はチュートリアルなのでボスは一番上に固定する";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "次はボスへの攻撃方法を紹介する";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "このゲームでは、通常攻撃ボタンがありません";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "その代わりボスに接近する";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ボスに接近すると自動で攻撃が出る";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ボスに触れてもダメージはないので、\nボスに触り続けることでたくさんのダメージを与えることができる";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "では、ダメージを与えてみましょう";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = string.Empty;
        TutorialCanvas.SetActive(false);
        PlayerMovementTutorial.canMove = true;
        TaskText.text = "タスク：\nボスに近づき、\nダメージを与えましょう";
        yield return new WaitUntil(() => BossHealth >= 60f);
        TaskBox.SetActive(true);
        yield return new WaitForSeconds(3f);
        TaskBox.SetActive(false);
        TaskText.text = string.Empty;
        Player.transform.position = PlayerMovementTutorial.PlayerOriginposition;
        PlayerMovementTutorial.canMove = false;
        TutorialCanvas.SetActive(true);
        BossUItext.text = "これは攻略度のゲージです";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        BossUItext.text = "ボスに一定ダメージを与えると、\nゲージが増加する";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        BossUItext.text = "ゲージが100%になるとゲームクリアです";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        BossUItext.text = string.Empty;
        TutorialCanvas.SetActive(false);
        TutorialProjetileManager.spawnSword();
        yield return new WaitForSeconds(2f);
        MainGameSceneManage.isTutorialPause = true;
        TutorialCanvas.SetActive(true);
        TutorialText.text = "これはボスによる攻撃です";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "これに当たるとダメージを受ける";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = string.Empty;
        MainGameSceneManage.isTutorialPause = false;
        TutorialCanvas.SetActive(false);
        yield return new WaitForSeconds(1f);
        TutorialCanvas.SetActive(true);
        PlayerHPUIText.text = "これは体力ゲージです";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        PlayerHPUIText.text = "0になるとゲームオーバーです";
        yield return new WaitForSeconds(3f);
        TutorialCanvas.SetActive(false);
        PlayerHPUIText.text = string.Empty;
        TutorialProjetileManager.spawnLaser();
        yield return new WaitForSeconds(1f);
        MainGameSceneManage.isTutorialPause = true;
        TutorialCanvas.SetActive(true);
        lockOnLaserTutorial = FindObjectOfType<LockOnLaserTutorial>();
        lockOnLaserTutorial.canFire = false;
        TutorialText.text = "これはボスによる特殊攻撃です";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "一部の特殊攻撃前に黄色の警告が表示される";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "移動で回避できるか";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ダッシュでも回避できる";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ダッシュ：キーボード：スペースキー\nコントローラー：L2/R2";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ダッシュ中は無敵状態になる";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "さあ、回避を使ってみましょう";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        lockOnLaserTutorial = FindObjectOfType<LockOnLaserTutorial>();
        lockOnLaserTutorial.canFire = true;
        MainGameSceneManage.isTutorialPause = false;
        TutorialCanvas.SetActive(false);
        PlayerMovementTutorial.canMove = true;
        PlayerMovementTutorial.canDash = true;
        TaskText.text = "タスク：\nダッシュを使う";
        inputText.text = "キーボード：スペースキー\nコントローラー：L2/R2";
        yield return new WaitUntil(() => PlayerMovementTutorial.dashed == true);
        TaskBox.SetActive(true);
        yield return new WaitForSeconds(3f);
        TutorialProjetileManager.CleanupProjectiles();
        TaskBox.SetActive(false);
        TaskText.text = string.Empty;
        inputText.text = string.Empty;
        TutorialCanvas.SetActive(true);
        PlayerMovementTutorial.canMove = false;
        PlayerMovementTutorial.canDash = false;
        Player.transform.position = PlayerMovementTutorial.PlayerOriginposition;
        TutorialText.text = "素晴らしい〜";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "最後にプレイヤースキルを説明する";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "キャラクターごとに異なるスキルがある";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "例えば、このキャラクターはスキル発動中にボスに与えるダメージを上げることができる";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "スキル入力：キーボード：Qキー\nコントローラー：●ボタン";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "さあ、スキルを使ってみましょう";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialCanvas.SetActive(false);
        PlayerMovementTutorial.canMove = true;
        PlayerMovementTutorial.canSkill = true;
        PlayerMovementTutorial.canDash = true;
        TaskText.text = "タスク：\nスキルを使う";
        inputText.text = "キーボード：Qキー\nコントローラー：●ボタン";
        yield return new WaitUntil(() => PlayerMovementTutorial.Skilled == true);
        TaskBox.SetActive(true);
        yield return new WaitForSeconds(6f);
        TaskBox.SetActive(false);
        TaskText.text = string.Empty;
        inputText.text = string.Empty;
        TutorialCanvas.SetActive(true);
        PlayerMovementTutorial.canMove = false;
        PlayerMovementTutorial.canSkill = false;
        PlayerMovementTutorial.canDash = false;
        Player.transform.position = PlayerMovementTutorial.PlayerOriginposition;
        TutorialText.text = "素晴らしい〜";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = string.Empty;
        PlayerSkillText.text = "ここにはクールダウンが表示される\nアクティブスキル/ダッシュ/パッシブスキル";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        PlayerSkillText.text = string.Empty;
        TutorialCanvas.SetActive(false);
        BossManagerTutorial.SpawnClosestWeakPoint();
        yield return new WaitForSeconds(3f);
        TutorialCanvas.SetActive(true);
        TutorialText.text = "ボスの弱点を発見したようですね";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ゲーム中、ボスの弱点はランダムなタイミング位置で出現する";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "弱点に近づいて弱点攻撃をすると、\n追加ダメージを与えることができる";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "弱点攻撃：キーボード：Shiftキー\nコントローラー：■ボタン";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "さあ、弱点攻撃をしてみましょう";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialCanvas.SetActive(false);
        PlayerMovementTutorial.canMove = true;
        PlayerMovementTutorial.canSkill = true;
        PlayerMovementTutorial.canDash = true;
        TaskText.text = "タスク：\n弱点に近づき、弱点ダメージを与える";
        inputText.text = "キーボード：Shiftキー\nコントローラー：■ボタン";
        yield return new WaitUntil(() => BossManagerTutorial.WeakPointHited == true);
        TaskBox.SetActive(true);
        yield return new WaitForSeconds(3f);
        TaskBox.SetActive(false);
        TaskText.text = string.Empty;
        inputText.text = string.Empty;
        TutorialCanvas.SetActive(true);
        PlayerMovementTutorial.canMove = false;
        PlayerMovementTutorial.canSkill = false;
        PlayerMovementTutorial.canDash = false;
        Player.transform.position = PlayerMovementTutorial.PlayerOriginposition;
        TutorialText.text = "素晴らしい！";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "以上でチュートリアルは終わりです";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "さあ、戦いに挑みましょう";
        ButtonText.text = "●ボタン押す続く";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        if (TutorialCheckManager != null)
        {
            TutorialCheckManager.TutorialDone = true;
        }
        TimeManager.isTutorial = false;
        Destroy(TimeManager.gameObject);
        SceneManager.LoadScene("CharacterSelectScene");
        yield return null;
    }

    void Update()
    {
        BossHealth = BossManagerTutorial.currentHealth;
    }

    public void Skip()
    {
        if (TutorialCheckManager != null)
        {
            TutorialCheckManager.TutorialDone = true;
        }
        TimeManager.isTutorial = false;
        Destroy(TimeManager.gameObject);
        SceneManager.LoadScene("CharacterSelectScene");
    }
}
