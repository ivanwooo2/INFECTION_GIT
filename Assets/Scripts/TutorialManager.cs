using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.SceneManagement;

public class TutorialManager : MonoBehaviour
{
    [SerializeField] private GameObject TutorialCanvas;
    [SerializeField] private TMP_Text TutorialText;
    [SerializeField] private TMP_Text BossUItext;
    [SerializeField] private TMP_Text PlayerHPUIText;
    [SerializeField] private TMP_Text PlayerSkillText;
    [SerializeField] private TMP_Text TaskText;
    [SerializeField] private TMP_Text inputText;
    [SerializeField] private TMP_Text ButtonText;
    [SerializeField] private GameObject TaskBox;
    [SerializeField] private GameObject Player;
    [SerializeField] private GameObject BossManager;
    [SerializeField] private GameObject ProjectileManager;
    [SerializeField] private GameObject MainGameSceneManager;
    [SerializeField] private GameObject PlayerHP;
    [SerializeField] private GameObject BossManagerHP;
    [SerializeField] private GameObject Skill;
    [SerializeField] private GameObject BackGround;
    private MainGameSceneManage MainGameSceneManage;
    private PlayerMovementTutorial PlayerMovementTutorial;
    private BossManagerTutorial BossManagerTutorial;
    private TutorialProjetileManager TutorialProjetileManager;
    private TutorialCheckManager TutorialCheckManager;
    private LockOnLaserTutorial lockOnLaserTutorial;
    private GameObject GameManager;
    private TimeManager TimeManager;
    private float BossHealth;
    void Start()
    {
        TutorialCheckManager = FindObjectOfType<TutorialCheckManager>();
        MainGameSceneManage = MainGameSceneManager.GetComponent<MainGameSceneManage>();
        TutorialProjetileManager = ProjectileManager.GetComponent<TutorialProjetileManager>();
        BossManagerTutorial = BossManager.GetComponent<BossManagerTutorial>();
        PlayerMovementTutorial = Player.GetComponent<PlayerMovementTutorial>();
        GameManager = GameObject.FindGameObjectWithTag("GameManager");
        TimeManager = GameManager.GetComponent<TimeManager>();
        TimeManager.isTutorial = true;
        BossUItext.text = string.Empty;
        PlayerHPUIText.text = string.Empty;
        PlayerSkillText.text = string.Empty;
        TaskText.text = string.Empty;
        inputText.text = string.Empty;
        ButtonText.text = string.Empty;
        Skill.SetActive(false);
        PlayerHP.SetActive(false);
        BossManagerHP.SetActive(false);
        TaskBox.SetActive(false);
        StartCoroutine(Tutorial());
    }

    IEnumerator Tutorial()
    {
        yield return new WaitForSeconds(1f);
        TutorialCanvas.SetActive(true);
        TutorialText.text = "INFECTION へようこそ";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ここは基本操作を学ぶためのチュートリアルです。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "まずは移動からです。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "キーボード：矢印キー、\nコントローラー：左ジョイスティック";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "試しに動かしてみましょう。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialCanvas.SetActive(false);
        PlayerMovementTutorial.canMove = true;
        TaskText.text = "タスク：\n試しに動かしてみましょう。";
        inputText.text = "キーボード：矢印キー\nコントローラー：左ジョイスティック";
        yield return new WaitUntil(() => PlayerMovementTutorial.Moved == true);
        TaskBox.SetActive(true);
        yield return new WaitForSeconds(3f);
        TaskBox.SetActive(false);
        TaskText.text = string.Empty;
        inputText.text = string.Empty;
        Player.transform.position = PlayerMovementTutorial.PlayerOriginposition;
        PlayerMovementTutorial.canMove = false;
        TutorialCanvas.SetActive(true);
        TutorialText.text = "問題ありません。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "あなたは INFECTION の世界でセキュリティー・システムを破壊しなくてはなりません。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "それは、ステージにおいてボスキャラとして登場し、\nランダムに動き回って攻撃してきます。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialCanvas.SetActive(false);
        BossManagerTutorial.SpawnBoss();
        yield return new WaitForSeconds(2f);
        TutorialCanvas.SetActive(true);
        TutorialText.text = "ただし、今回はチュートリアルなので\n動くことはありません。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ここからシステムへの攻撃方法を説明します。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "あなたには、攻撃用のボタンは必用ありません。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ボスに接触することで、\n自動的にウィルスアタックを仕掛けられます。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "もちろんボスに接触しても\nダメージを受けることはありません。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "では接近してみましょう。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = string.Empty;
        TutorialCanvas.SetActive(false);
        PlayerMovementTutorial.canMove = true;
        TaskText.text = "タスク：\nボスに接触しダメージを与えましょう。";
        yield return new WaitUntil(() => BossHealth >= 30f);
        TaskBox.SetActive(true);
        yield return new WaitForSeconds(3f);
        TaskBox.SetActive(false);
        TaskText.text = string.Empty;
        Player.transform.position = PlayerMovementTutorial.PlayerOriginposition;
        PlayerMovementTutorial.canMove = false;
        TutorialCanvas.SetActive(true);
        BackGround.SetActive(false);
        BossManagerHP.SetActive(true);
        BossUItext.text = "これは\nボスのダメージゲージです。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        BossUItext.text = "ボスにダメージを与えると、\nゲージが増加します。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        BossUItext.text = "ゲージが100%になると\nミッション・コンプリートです。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        BackGround.SetActive(true);
        BossManagerHP.SetActive(false);
        BossUItext.text = string.Empty;
        TutorialCanvas.SetActive(false);
        TutorialProjetileManager.spawnSword();
        yield return new WaitForSeconds(2f);
        MainGameSceneManage.isTutorialPause = true;
        TutorialCanvas.SetActive(true);
        TutorialText.text = "これはボスによるアンチ・ウィルスの攻撃です。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "当たるとダメージを受けます。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = string.Empty;
        MainGameSceneManage.isTutorialPause = false;
        TutorialCanvas.SetActive(false);
        yield return new WaitForSeconds(1f);
        TutorialCanvas.SetActive(true);
        PlayerHP.SetActive(true);
        BackGround.SetActive(false);
        PlayerHPUIText.text = "これは\nあなたのHPゲージです。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        PlayerHPUIText.text = "HPが0になると\nゲームオーバーです。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        PlayerHP.SetActive(false);
        BackGround.SetActive(true);
        TutorialCanvas.SetActive(false);
        PlayerHPUIText.text = string.Empty;
        TutorialProjetileManager.spawnLaser();
        yield return new WaitForSeconds(1f);
        MainGameSceneManage.isTutorialPause = true;
        TutorialCanvas.SetActive(true);
        lockOnLaserTutorial = FindObjectOfType<LockOnLaserTutorial>();
        lockOnLaserTutorial.canFire = false;
        TutorialText.text = "一部の特殊攻撃前に黄色の警告が表示されます";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "移動かダッシュで回避できます";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ダッシュは使うと少しの間無敵状態になります";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ダッシュ：キーボード：スペースキー、\nコントローラー：L2/R2";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "さあ、回避を使ってみましょう";
        ButtonText.text =   "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        lockOnLaserTutorial = FindObjectOfType<LockOnLaserTutorial>();
        lockOnLaserTutorial.canFire = true;
        MainGameSceneManage.isTutorialPause = false;
        TutorialCanvas.SetActive(false);
        PlayerMovementTutorial.canMove = true;
        PlayerMovementTutorial.canDash = true;
        TaskText.text = "タスク：\nダッシュを使う";
        inputText.text = "キーボード：スペースキー\nコントローラー：L2/R2";
        yield return new WaitUntil(() => PlayerMovementTutorial.dashed == true);
        TaskBox.SetActive(true);
        yield return new WaitForSeconds(3f);
        TutorialProjetileManager.CleanupProjectiles();
        TaskBox.SetActive(false);
        TaskText.text = string.Empty;
        inputText.text = string.Empty;
        TutorialCanvas.SetActive(true);
        PlayerMovementTutorial.canMove = false;
        PlayerMovementTutorial.canDash = false;
        Player.transform.position = PlayerMovementTutorial.PlayerOriginposition;
        TutorialText.text = "素晴らしいです。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "最後にスキルの説明をします。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ステージによって、あなたに最適なウィルスのキャラクターが用意されます。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "キャラクターはそれぞれに有効なスキルを持っています。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "例えば、このキャラクターはスキルを発動させると\n一定時間ボスに与えるダメージを増やします。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "スキル入力：キーボード：Qキー、\nコントローラー：●ボタン";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "さあ、スキルを使ってみましょう";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialCanvas.SetActive(false);
        PlayerMovementTutorial.canMove = true;
        PlayerMovementTutorial.canSkill = true;
        PlayerMovementTutorial.canDash = true;
        TaskText.text = "タスク：\nスキルを使う";
        inputText.text = "キーボード：Qキー\nコントローラー：●ボタン";
        yield return new WaitUntil(() => PlayerMovementTutorial.Skilled == true);
        TaskBox.SetActive(true);
        yield return new WaitForSeconds(5f);
        TaskBox.SetActive(false);
        TaskText.text = string.Empty;
        inputText.text = string.Empty;
        TutorialCanvas.SetActive(true);
        PlayerMovementTutorial.canMove = false;
        PlayerMovementTutorial.canSkill = false;
        PlayerMovementTutorial.canDash = false;
        Player.transform.position = PlayerMovementTutorial.PlayerOriginposition;
        TutorialText.text = "異常はありません。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = string.Empty;
        BackGround.SetActive(false);
        Skill.SetActive(true);
        PlayerSkillText.text = "ここにアクティブスキル/ダッシュ/パッシブスキルのクールダウンが表示されます。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        BackGround.SetActive(true);
        Skill.SetActive(false);
        PlayerSkillText.text = string.Empty;
        TutorialCanvas.SetActive(false);
        BossManagerTutorial.SpawnClosestWeakPoint();
        yield return new WaitForSeconds(3f);
        TutorialCanvas.SetActive(true);
        TutorialText.text = "ボスの弱点を発見したようですね。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ボスの弱点ポイントは\nランダムなタイミングで出現します。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "ポイントに近づいて「弱点攻撃」をすると、\n追加ダメージを与えることができます。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "弱点攻撃：キーボード：Shiftキー、\nコントローラー：■ボタン";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "さあ、弱点攻撃をしてみましょう。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialCanvas.SetActive(false);
        PlayerMovementTutorial.canMove = true;
        PlayerMovementTutorial.canSkill = true;
        PlayerMovementTutorial.canDash = true;
        TaskText.text = "タスク：\n弱点に近づき、弱点ダメージを与える。";
        inputText.text = "キーボード：Shiftキー\nコントローラー：■ボタン";
        yield return new WaitUntil(() => BossManagerTutorial.WeakPointHited == true);
        TaskBox.SetActive(true);
        yield return new WaitForSeconds(3f);
        TaskBox.SetActive(false);
        TaskText.text = string.Empty;
        inputText.text = string.Empty;
        TutorialCanvas.SetActive(true);
        PlayerMovementTutorial.canMove = false;
        PlayerMovementTutorial.canSkill = false;
        PlayerMovementTutorial.canDash = false;
        Player.transform.position = PlayerMovementTutorial.PlayerOriginposition;
        TutorialText.text = "これで完璧です。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "チュートリアルを終了します。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        TutorialText.text = "さぁ、侵入を開始しましょう。";
        ButtonText.text = "Qキー/〇ボタン次へ進む";
        yield return new WaitUntil(() => Input.GetButtonDown("Skill"));
        yield return new WaitForSeconds(0.1f);
        if (TutorialCheckManager != null)
        {
            TutorialCheckManager.TutorialDone = true;
        }
        TimeManager.isTutorial = false;
        Destroy(TimeManager.gameObject);
        SceneManager.LoadScene("CharacterSelectScene");
        yield return null;
    }

    void Update()
    {
        BossHealth = BossManagerTutorial.currentHealth;
    }

    public void Skip()
    {
        if (TutorialCheckManager != null)
        {
            TutorialCheckManager.TutorialDone = true;
        }
        TimeManager.isTutorial = false;
        Destroy(TimeManager.gameObject);
        SceneManager.LoadScene("CharacterSelectScene");
    }
}
